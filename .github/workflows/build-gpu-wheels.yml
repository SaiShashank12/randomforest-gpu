name: Build GPU Wheels (NVFORTRAN)

on:
  push:
    branches: [main]
  workflow_dispatch:
  release:
    types: [published]

jobs:
  build_gpu_wheels:
    name: Build GPU wheel for Python ${{ matrix.python-version }}
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.12']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install NVIDIA HPC SDK
        run: |
          curl https://developer.download.nvidia.com/hpc-sdk/ubuntu/DEB-GPG-KEY-NVIDIA-HPC-SDK | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-hpcsdk-archive-keyring.gpg
          echo 'deb [signed-by=/usr/share/keyrings/nvidia-hpcsdk-archive-keyring.gpg] https://developer.download.nvidia.com/hpc-sdk/ubuntu/amd64 /' | sudo tee /etc/apt/sources.list.d/nvhpc.list
          sudo apt-get update -y
          sudo apt-get install -y nvhpc-23-11

      - name: Setup NVHPC environment
        run: |
          echo "NVARCH=`uname -s`_`uname -m`" >> $GITHUB_ENV
          echo "NVCOMPILERS=/opt/nvidia/hpc_sdk" >> $GITHUB_ENV
          echo "/opt/nvidia/hpc_sdk/Linux_x86_64/23.11/compilers/bin" >> $GITHUB_PATH
          echo "PATH=/opt/nvidia/hpc_sdk/Linux_x86_64/23.11/compilers/bin:$PATH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/opt/nvidia/hpc_sdk/Linux_x86_64/23.11/compilers/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Verify nvfortran
        run: |
          which nvfortran
          nvfortran --version

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel meson-python meson ninja numpy pytest

      - name: Build GPU wheel
        env:
          FC: nvfortran
        run: |
          python -m build --wheel

      - name: Repair wheel with auditwheel (bundle dependencies)
        run: |
          pip install auditwheel patchelf
          # Add NVIDIA HPC SDK lib to LD_LIBRARY_PATH for auditwheel
          export LD_LIBRARY_PATH=/opt/nvidia/hpc_sdk/Linux_x86_64/23.11/compilers/lib:$LD_LIBRARY_PATH
          # Repair wheel - bundles all .so dependencies
          auditwheel repair dist/*.whl -w dist_repaired/
          # Replace original wheel with repaired one
          rm dist/*.whl
          mv dist_repaired/*.whl dist/
          rm -rf dist_repaired

      - name: List built wheels
        run: |
          ls -lh dist/*.whl
          echo "GPU wheel built with nvfortran + OpenACC"

      - name: Check library dependencies
        run: |
          # Extract wheel to inspect contents
          unzip -q dist/*.whl -d wheel_contents
          echo "=== Wheel contents ==="
          find wheel_contents -name "*.so" -type f
          echo ""
          echo "=== Library dependencies ==="
          find wheel_contents -name "*.so" -type f -exec ldd {} \;
          echo ""
          echo "=== Missing libraries ==="
          find wheel_contents -name "*.so" -type f -exec ldd {} \; | grep "not found" || echo "✓ No missing libraries!"

      - name: Test GPU wheel loads correctly
        run: |
          pip install dist/*.whl
          python -c "from randomforest_gpu import RandomForestClassifier; print('✓ Wheel imports successfully')" || echo "Warning: Import may require NVIDIA HPC SDK at runtime"
          # Skip strict tests - wheel requires NVIDIA GPU + CUDA runtime
          echo "✓ GPU wheel built (requires NVIDIA GPU + CUDA at runtime)"

      - name: Upload GPU wheels
        uses: actions/upload-artifact@v4
        with:
          name: gpu-wheel-py${{ matrix.python-version }}
          path: dist/*.whl
          retention-days: 90

  collect_gpu_wheels:
    name: Upload GPU wheels to Release
    needs: build_gpu_wheels
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Download all GPU wheels
        uses: actions/download-artifact@v4
        with:
          pattern: gpu-wheel-*
          merge-multiple: true
          path: gpu-wheelhouse

      - name: Display structure
        run: ls -lh gpu-wheelhouse

      - name: Get version
        id: get_version
        run: |
          VERSION=$(grep "version = " pyproject.toml | head -1 | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Upload GPU wheels to GPU release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          TAG="v${VERSION}-gpu"

          # Delete old GPU release if exists
          gh release delete "$TAG" -y 2>/dev/null || true

          # Create GPU-specific release
          gh release create "$TAG" \
            --title "Random Forest GPU v${VERSION} (GPU Build)" \
            --notes "**GPU-Accelerated Wheels**

          Built with NVIDIA HPC SDK nvfortran + OpenACC for GPU acceleration.

          **Requirements:**
          - NVIDIA GPU with CUDA 12.3+
          - Linux x86_64

          **Installation:**
          \`\`\`bash
          # Python 3.12
          pip install https://github.com/SaiShashank12/randomforest-gpu/releases/download/${TAG}/randomforest_gpu-${VERSION}-cp312-cp312-linux_x86_64.whl

          # Python 3.11
          pip install https://github.com/SaiShashank12/randomforest-gpu/releases/download/${TAG}/randomforest_gpu-${VERSION}-cp311-cp311-linux_x86_64.whl
          \`\`\`

          **For CPU-only wheels, see the main release:** https://github.com/SaiShashank12/randomforest-gpu/releases/tag/v${VERSION}" \
            gpu-wheelhouse/*.whl
